as.Date(mydate, format = "%m/%d/%Y")
mydate <- factor("1/15/2006")
as.Date(mydate, format = "%m/%d/%Y")
data <- "whas500" %>% get_data(.)
data <- data.table::data.table(data)
data$admitdate %>% as.Date(., format = "%m/%d/%Y")
data$admitdate
data$admitdate %>% as.Date(., format = "%m/%d/%y")
data[, admitdate:=as.Date(admitdate, format = "%m/%d/%y")]
setorder(data, admitdate)
data
data[, admitdate:=as.Date(admitdate, format = "%m/%d/%y"), disdate:=as.Date(disdate, format = "%m/%d/%y"), fdate:=as.Date(fdate, format = "%m/%d/%y")]
data <- "whas500" %>% get_data(.)
data[, admitdate:=as.Date(admitdate, format = "%m/%d/%y")]
data <- "whas500" %>% get_data(.)
data[, admitdate:=as.Date(admitdate, format = "%m/%d/%y"), disdate:=as.Date(disdate,]
data[, admitdate:=as.Date(admitdate, format = "%m/%d/%y")]
data <- "whas500" %>% get_data(.) %>% data.table(.)
data[, admitdate:=as.Date(admitdate, format = "%m/%d/%y")]
data[, fdate:=as.Date(fdate, format = "%m/%d/%y")]
data[, disdate:=as.Date(disdate, format = "%m/%d/%y")]
data
data
data[, cumu_hos_day:= disdate - admitdate]
data
data[,unique(fdate)]
500*200
data
tt <- function(x, t) {ifelse(t>x, 0, t)}
tt <- function(x, t, ...) {ifelse(t>x, 0, t)}
tt(10, 2)
tt(10, 11)
tt <- function(x, t, ...) {ifelse(t>x, x, t)}
tt <- function(x, t, ...) {ifelse(t>x, x, t)}
tt(10, 11)
tt(10, 10)
test <- coxph(Surv(time = follow_up_time_length, event = final_status)~tt(cumu_hos_day), data = data)
test <- coxph(Surv(time = lenfol, event = fstat)~tt(cumu_hos_day), data = data)
data_1 <- data.frame(data)
data
data_1
data$cumu_hos_day <- as.numeric(data$cumu_hos_day)
data
test <- coxph(Surv(time = lenfol, event = fstat)~tt(cumu_hos_day), data = data)
test
test <- coxph(Surv(time = lenfol, event = fstat)~tt(cumu_hos_day), data = data, tt = function(x, t, ...) {ifelse(t>x, x, t)})
test
test <- coxph(Surv(time = lenfol, event = fstat)~tt(cumu_hos_day), data = data, tt = function(x, t, ...) {ifelse(t>x, x, t)})
test
test <- coxph(Surv(time = lenfol, event = fstat)~zz(cumu_hos_day), data = data, tt = function(x, t, ...) {ifelse(t>x, x, t)})
test <- coxph(Surv(time = lenfol, event = fstat)~tt(cumu_hos_day), data = data)
test
tt
test <- coxph(Surv(time = lenfol, event = fstat)~tt(cumu_hos_day), data = data, tt = function(cumu_hos_day, time, ...) {ifelse(t>cumu_hos_day, cumu_hos_day, time)})
test <- coxph(Surv(time = lenfol, event = fstat)~tt(cumu_hos_day), data = data, tt = function(cumu_hos_day, time, ...) {ifelse(time>cumu_hos_day, cumu_hos_day, time)})
test
setwd("Google Drive/independent study/inverse regression/R_code/")
library(tidyverse)
n <- 10^(3)
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = 3, byrow = TRUE)
slice_number <- 8
slice <- 8
slice_data(x, y, slice_number) %>% write.csv(file = "simulation_00.csv")
source('~/Google Drive/independent study/inverse regression/R_code/SIR_rows_helpers.R')
set.seed(1014)
n <- 10^(3)
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = 3, byrow = TRUE)
slice_number <- 8
slice <- 8
slice_data(x, y, slice_number) %>% write.csv(file = "simulation_00.csv")
slice_level <- letters[1:slice]
ncol <- 3
sum_x_x_t <- matrix(0, ncol, ncol)
sum_h <- matrix(0, length(slice_level), ncol)
total_number_slice <- numeric(length(slice_level))
n <- numeric(1)
n
input_file <- "simulation_00.csv"
con  <- file(input_file, open = "r")
readLines(con, n = 1, warn = FALSE)
slice_data(x, y, slice_number) %>% write.csv(file = "simulation_00.csv", col.names = FALSE)
close(con)
slice_data(x, y, slice_number) %>% write.csv(file = "simulation_00.csv", col.names = FALSE)
con  <- file(input_file, open = "r")
readLines(con, n = 1, warn = FALSE, )
readLines(con, n = 1)
close(con)
slice_data(x, y, slice_number) %>% write.csv(file = "simulation_00.csv", sep = ",")
slice_data(x, y, slice_number)
slice_data(x, y, slice_number) %>% c(., file = "simulation_00.csv")
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
con  <- file(input_file, open = "r")
scan(con,what="numeric",nlines=1,sep=',',skip=1,quiet=TRUE)
scan(con,what="numeric",nlines=1,sep=',',skip=1,quiet=TRUE)
scan(con,what="numeric",nlines=1,sep=',',skip=1,quiet=TRUE)
scan(con,what="numeric",nlines=1,sep=',',skip=1,quiet=TRUE)
con  <- file(input_file, open = "r")
header <- scan(con,what="numeric",nlines=1,sep=',',quiet=TRUE)
header
x_locations <- pmatch("x", header)
x_locations
header
x_locations <- pmatch("x", header, duplicates.ok = TRUE)
x_locations
x_locations <- pmatch("x.", header, duplicates.ok = TRUE)
x_locations
header
x_locations <- pmatch("x.V", header, duplicates.ok = TRUE)
x_locations
x_locations <- pmatch("x.V1", header, duplicates.ok = TRUE)
x_locations
x_locations <- pmatch("x", header)
x_locations
grep("*x*", header)
grep("x*", header)
grep("x", header)
con  <- file(input_file, open = "r")
header <- scan(con,what="numeric",nlines=1,sep=',',quiet=TRUE)
x_locations <- grep("x", header)
scan(con,what="numeric",nlines=1,sep=',',quiet=TRUE)
row <- scan(con,what="numeric",nlines=1,sep=',',quiet=TRUE)
row
row[x_locations] %>% as.numeric
slice <- grep("slice", header)
slice
x_location <- grep("x", header)
slice_location <- grep("slice", header)
x <- row[x_location] %>% as.numeric(.) %>% as.matrix(., nrow = 1)
slice <- row[slice_location]
slice
x
x <- row[x_location] %>% as.numeric(.) %>% matrix(., nrow = 1)
x
suff_stat <- sufficient_stat_each_row(x, slice, slice_level)
stuff_stat
suff_stat
source('~/Google Drive/independent study/inverse regression/R_code/SIR_rows_helpers.R')
close(con)
sufficient_stat <- calculate_sufficient_data_disk(simulation_00.csv, ncol = 3, slice_level)
getwd()
input_file
file(input_file, open = "r")
getwd
getwd()
sufficient_stat <- calculate_sufficient_data_disk(simulation_00.csv, ncol = 3, slice_level)
sufficient_stat <- calculate_sufficient_data_disk("simulation_00.csv", ncol = 3, slice_level)
rm(con)
set.seed(1014)
n <- 10^(3)
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = 3, byrow = TRUE)
slice_number <- 8
slice <- 8
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
slice_level <- letters[1:slice]
source('~/Google Drive/independent study/inverse regression/R_code/SIR_rows_helpers.R')
set.seed(1014)
n <- 10^(3)
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = 3, byrow = TRUE)
slice_number <- 8
slice <- 8
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
slice_level <- letters[1:slice]
sufficient_stat <- calculate_sufficient_data_disk("simulation_00.csv", ncol = 3, slice_level)
options(error = recover)
sufficient_stat <- calculate_sufficient_data_disk("simulation_00.csv", ncol = 3, slice_level)
suff_stat
ls
ls()
suff_stat[[1]]
x
sufficient_stat_each_row(t(x), slice, slice_level)
set.seed(1014)
n <- 10^(3)
ncol <- 3
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = ncol, byrow = TRUE)
slice_number <- 8
slice <- 8
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
slice_level <- letters[1:slice]
x
source('~/Google Drive/independent study/inverse regression/R_code/SIR_rows_helpers.R')
sufficient_stat <- calculate_sufficient_data_disk("simulation_00.csv", ncol = 3, slice_level)
x
tcrossprod(x)
x %>% dim()
source('~/Google Drive/independent study/inverse regression/R_code/SIR_rows_helpers.R')
source('~/Google Drive/independent study/inverse regression/R_code/SIR_rows_helpers.R')
setwd("Google Drive/independent study/inverse regression/R_code/")
setwd("Google Drive/independent study/inverse regression/R_code/")
getwd
getwd()
library(tidyverse)
set.seed(1014)
n <- 10^(3)
ncol <- 3
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = ncol, byrow = TRUE)
slice_number <- 8
slice <- 8
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
slice_level <- letters[1:slice]
sufficient_stat <- calculate_sufficient_data_disk("simulation_00.csv", ncol = 3, slice_level)
suff_stat
x
crossprod(x)
setwd("Google Drive/independent study/inverse regression/R_code/")
setwd("Google Drive/independent study/inverse regression/R_code/")
setwd("Google Drive/independent study/inverse regression/R_code")
setwd("~/Google Drive/independent study/inverse regression/R_code")
library(tidyverse)
set.seed(1014)
n <- 10^(3)
ncol <- 3
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = ncol, byrow = TRUE)
slice_number <- 8
slice <- 8
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
slice_level <- letters[1:slice]
source('~/Google Drive/independent study/inverse regression/R_code/SIR_rows_helpers.R')
sufficient_stat_each_row()
source('~/Google Drive/independent study/inverse regression/R_code/SIR_rows_helpers.R')
sufficient_stat_each_row
sufficient_stat <- calculate_sufficient_data_disk("simulation_00.csv", ncol = 3, slice_level)
library(tidyverse)
set.seed(1014)
n <- 10^(3)
ncol <- 3
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = ncol, byrow = TRUE)
slice_number <- 8
slice <- 8
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
slice_level <- letters[1:slice]
library(tidyverse)
set.seed(1014)
n <- 10^(3)
ncol <- 3
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = ncol, byrow = TRUE)
slice_number <- 8
slice <- 8
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
slice_level <- letters[1:slice]
sufficient_stat <- calculate_sufficient_data_disk("simulation_00.csv", ncol = 3, slice_level)
sufficient_stat
m_h <- calculate_slice_mean(sufficient_stat)
result <- calculate_SIR_direction(slice_mean = m_h, sig_xx_2 = sufficient_stat$sig_xx_2, weight = sufficient_stat$total_number_slice/sum(sufficient_stat$total_number_slice) )
result
sirself(y, x, n, p = 3, slice)
source('~/Google Drive/independent study/inverse regression/R_code/distance.r')
source('~/Google Drive/independent study/inverse regression/R_code/sir_self.R')
sirself(y, x, n, p = 3, slice)
sirself(y, x, n, p = 3, slice)
result
s <- sirself(y, x, n, p = 3, slice)
s$eigenvalues - result$eigenvalues
s$V - result$v
s$v - result$v
SIR_rows <- function (input_file, ncol, slice_level) {
sufficient_stat <- calculate_sufficient_data_disk(input_file, ncol, slice_level)
m_h <- calculate_slice_mean(sufficient_stat)
result <- calculate_SIR_direction(slice_mean = m_h, sig_xx_2 = sufficient_stat$sig_xx_2, weight = sufficient_stat$total_number_slice/sum(sufficient_stat$total_number_slice) )
result
}
slice <- 8
sirself(y, x, n, p = 3, slice)
SIR_rows("simulation_00.csv", ncol, slice_level)
set.seed(1014)
n <- 10^(5)
ncol <- 3
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = ncol, byrow = TRUE)
slice_number <- 8
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
slice_level <- letters[1:slice]
source('~/Google Drive/independent study/inverse regression/R_code/SIR_rows_helpers.R')
SIR_rows
sirself(y, x, n, p = ncol, slice_number)
source('~/Google Drive/independent study/inverse regression/R_code/sir_self.R')
sirself(y, x, n, p = ncol, slice_number)
set.seed(1014)
n <- 10^(5)
ncol <- 3
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = ncol, byrow = TRUE)
slice_number <- 8
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
slice_level <- letters[1:slice]
slice_data(x, y, slice_number)
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
slice_level <- letters[1:slice]
slice()
set.seed(1014)
n <- 10^(5)
ncol <- 3
y <- rnorm(sd = 50, n)
x <- rnorm(n*3,c(1, 20, 100)) %>% matrix(. , nrow = n, ncol = ncol, byrow = TRUE)
slice_number <- 8
slice_data(x, y, slice_number) %>% write.csv(., file = "simulation_00.csv")
slice_level <- letters[1:slice_number]
sirself(y, x, n, p = ncol, slice_number)
SIR_rows("simulation_00.csv", ncol, slice_level)
sir_result<- sirself(y, x, n, p = ncol, slice_number)
sir_rows_result <- SIR_rows("simulation_00.csv", ncol, slice_level)
p <- 6 # demension
n <- 10^(3)
x <- rnorm(p*n) %>% matrix(., ncol = p)
x
cor(x)
n <- 10^(5)
x <- rnorm(p*n) %>% matrix(., ncol = p)
cor(x)
beta_2 <- matrix(c(1,0,0,0,1,3),ncol = 1)
(x%*%beta_1)^2
beta_1 <- matrix(c(1,1,1,0,0,0),ncol = 1)
beta_2 <- matrix(c(1,0,0,0,1,3),ncol = 1)
0.4*(x%*%beta_1)^2
x%*%beta_2/4 %>% head()
(x%*%beta_2/4) %>% head()
((x%*%beta_2)/4) %>% head()
y_1 <- 0.4*(x%*%beta_1)^2 + 3*sin(x%*%beta_2/4) + sigma*e
set.seed(1014)
p <- 6 # demension
n <- 10^(5)
e <- rnorm(n)
sigma <- 0.2
x <- rnorm(p*n) %>% matrix(., ncol = p)
beta_1 <- matrix(c(1,1,1,0,0,0),ncol = 1)
beta_2 <- matrix(c(1,0,0,0,1,3),ncol = 1)
y_1 <- 0.4*(x%*%beta_1)^2 + 3*sin(x%*%beta_2/4) + sigma*e
y_1
y_3 <- 0.4*(x%*%beta_1)^2 + (x%*%beta_2) %>% abs(.) %>% sqrt(.) + sigma*e
y_3 <- 0.4*(x%*%beta_1)^2 + sqrt(abs(x%*%beta_2)) + sigma*e
y_3_t <- 0.4*(x%*%beta_1)^2 + sqrt(abs(x%*%beta_2)) + sigma*e
y_3 <- 0.4*(x%*%beta_1)^2 + (x%*%beta_2) %>% abs(.) %>% sqrt(.) + sigma*e
y_3 - y_3_t
sum(y_3 - y_3_t)
(1+x%*%beta_2)
c(1,2)
c(1,2) * c(5,10)
file_names <- paste0("simulation_Li_2007_", y_names, ".csv")
y_names <- c("y_1","y_2","y_3","y_4")
file_names <- paste0("simulation_Li_2007_", y_names, ".csv")
file_names
eval("y_1")
eval(y_1)
y <- list(y_1 = y_1, y_2 = y_2, y_3 = y_3, y_4 = y_4)
y_1 <- 0.4*(x%*%beta_1)^2 + 3*sin(x%*%beta_2/4) + sigma*e
y_2 <- 3*sin(x%*%beta_1/4) + 3*sin(x%*%beta_2/4) + sigma*e
y_3 <- 0.4*(x%*%beta_1)^2 + (x%*%beta_2) %>% abs(.) %>% sqrt(.) + sigma*e
y_4 <- 3*sin(x%*%beta_2/4) + (1+x%*%beta_2)*sigma*e
y <- list(y_1 = y_1, y_2 = y_2, y_3 = y_3, y_4 = y_4)
i =1
y <- y[[i]]
y
slice_data(x, y, slice_number) %>% write.csv(., file = file_names[i])
y %>% class
dim(y)
as.numeric(y) %>% dim()
slice_data(x, as.numeric(y), slice_number) %>% write.csv(., file = file_names[i])
SIR_rows(file_names[i], ncol = p, slice_level)
sirself(y, x, n, p, slice_number)
for(i in 1:4) {
y <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y, slice_number) %>% write.csv(., file = file_names[i])
sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
sir_Yang <- sirself(y, x, n, p, slice_number)
paste0("the eigenvalues difference on the ", i, "th simulation model from the Li, Bing(2007)")
sir_row$eigenvalues - sir_Yang$eigenvalues
}
v
eigen(v)
p
ls()
ls(1)
where
source('~/Google Drive/independent study/inverse regression/R_code/sir_self.R')
source('~/Google Drive/independent study/inverse regression/R_code/SIR_rows_helpers.R')
setwd("~/Google Drive/independent study/inverse regression/R_code")
library(tidyverse)
set.seed(1014)
p <- 6 # demension
n <- 10^(5)
e <- rnorm(n)
sigma <- 0.2
x <- rnorm(p*n) %>% matrix(., ncol = p)
beta_1 <- matrix(c(1,1,1,0,0,0),ncol = 1)
beta_2 <- matrix(c(1,0,0,0,1,3),ncol = 1)
y_1 <- 0.4*(x%*%beta_1)^2 + 3*sin(x%*%beta_2/4) + sigma*e
y_2 <- 3*sin(x%*%beta_1/4) + 3*sin(x%*%beta_2/4) + sigma*e
y_3 <- 0.4*(x%*%beta_1)^2 + (x%*%beta_2) %>% abs(.) %>% sqrt(.) + sigma*e
y_4 <- 3*sin(x%*%beta_2/4) + (1+x%*%beta_2)*sigma*e
y <- list(y_1 = y_1, y_2 = y_2, y_3 = y_3, y_4 = y_4)
slice_number <- 8
slice_level <- letters[1:slice_number]
y_names <- c("y_1","y_2","y_3","y_4")
file_names <- paste0("simulation_Li_2007_", y_names, ".csv")
for(i in 1:4) {
y <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y, slice_number) %>% write.csv(., file = file_names[i])
sir_Yang <- sirself(y, x, n, p, slice_number)
sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
paste0("the eigenvalues difference on the ", i, "th simulation model from the Li, Bing(2007)")
sir_row$eigenvalues - sir_Yang$eigenvalues
}
i
z
slice
i = 2
y_2
i
y <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
y <- list(y_1 = y_1, y_2 = y_2, y_3 = y_3, y_4 = y_4)
y <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y, slice_number) %>% write.csv(., file = file_names[i])
sir_Yang <- sirself(y, x, n, p, slice_number)
sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
for(i in 1:4) {
y <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y, slice_number) %>% write.csv(., file = file_names[i])
sir_Yang <- sirself(y, x, n, p, slice_number)
sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
paste0("the eigenvalues difference on the ", i, "th simulation model from the Li, Bing(2007)")
sir_row$eigenvalues - sir_Yang$eigenvalues
}
ls(1)
i
z
where
slice_number
for(i in 1:4) {
y <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y, slice_number) %>% write.csv(., file = file_names[i])
# sir_Yang <- sirself(y, x, n, p, slice_number)
# sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
# paste0("the eigenvalues difference on the ", i, "th simulation model from the Li, Bing(2007)")
# sir_row$eigenvalues - sir_Yang$eigenvalues
}
i
length(y)
y_1 <- 0.4*(x%*%beta_1)^2 + 3*sin(x%*%beta_2/4) + sigma*e
y_2 <- 3*sin(x%*%beta_1/4) + 3*sin(x%*%beta_2/4) + sigma*e
y_3 <- 0.4*(x%*%beta_1)^2 + (x%*%beta_2) %>% abs(.) %>% sqrt(.) + sigma*e
y_4 <- 3*sin(x%*%beta_2/4) + (1+x%*%beta_2)*sigma*e
y <- list(y_1 = y_1, y_2 = y_2, y_3 = y_3, y_4 = y_4)
slice_number <- 8
slice_level <- letters[1:slice_number]
y_names <- c("y_1","y_2","y_3","y_4")
file_names <- paste0("simulation_Li_2007_", y_names, ".csv")
for(i in 1:4) {
y <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y, slice_number) %>% write.csv(., file = file_names[i])
# sir_Yang <- sirself(y, x, n, p, slice_number)
# sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
# paste0("the eigenvalues difference on the ", i, "th simulation model from the Li, Bing(2007)")
# sir_row$eigenvalues - sir_Yang$eigenvalues
}
for(i in 1:4) {
y_i <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y_i, slice_number) %>% write.csv(., file = file_names[i])
sir_Yang <- sirself(y_i, x, n, p, slice_number)
sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
paste0("the eigenvalues difference on the ", i, "th simulation model from the Li, Bing(2007)")
sir_row$eigenvalues - sir_Yang$eigenvalues
}
for(i in 1:4) {
y_i <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y_i, slice_number) %>% write.csv(., file = file_names[i])
# sir_Yang <- sirself(y_i, x, n, p, slice_number)
# sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
# paste0("the eigenvalues difference on the ", i, "th simulation model from the Li, Bing(2007)")
# sir_row$eigenvalues - sir_Yang$eigenvalues
}
for(i in 1:4) {
y_i <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y_i, slice_number) %>% write.csv(., file = file_names[i])
# sir_Yang <- sirself(y_i, x, n, p, slice_number)
# sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
# paste0("the eigenvalues difference on the ", i, "th simulation model from the Li, Bing(2007)")
# sir_row$eigenvalues - sir_Yang$eigenvalues
}
y <- list(y_1 = y_1, y_2 = y_2, y_3 = y_3, y_4 = y_4)
for(i in 1:4) {
y_i <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y_i, slice_number) %>% write.csv(., file = file_names[i])
# sir_Yang <- sirself(y_i, x, n, p, slice_number)
# sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
# paste0("the eigenvalues difference on the ", i, "th simulation model from the Li, Bing(2007)")
# sir_row$eigenvalues - sir_Yang$eigenvalues
}
for(i in 1:4) {
y_i <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y_i, slice_number) %>% write.csv(., file = file_names[i])
sir_Yang <- sirself(y_i, x, n, p, slice_number)
sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
paste0("the eigenvalues difference on the ", i, "th simulation model from the Li, Bing(2007)")
sir_row$eigenvalues - sir_Yang$eigenvalues
}
for(i in 1:4) {
y_i <- y[[i]] %>% as.numeric(.) # data.table need the y to be a vector instead of matrix
slice_data(x, y_i, slice_number) %>% write.csv(., file = file_names[i])
sir_Yang <- sirself(y_i, x, n, p, slice_number)
sir_row <- SIR_rows(file_names[i], ncol = p, slice_level)
print(paste0("the eigenvalues difference on the ", i, "th simulation model from the Li, Bing(2007)"))
print(sir_row$eigenvalues - sir_Yang$eigenvalues)
}
