input
data.frame(a =1, b = c(1,2))
mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path) )
mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
result_list <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f))
sir_dr <- dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number)
}
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
sir_dr <- dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number)
}
result_list <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_list <- append(result_list, dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number))
}
result_list
result_list <- append(result_list, f = dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number))
result_list <- append(result_list, result = dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number))
result_list <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_list <- append(result_list, list(dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number)))
}
result_list
result_list[[1]]
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path
),
SIMPLIFY = FALSE)
input <- prepare_input("Li_2009", root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path
),
SIMPLIFY = FALSE)
result_dr <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_dr <- append(result_dr, list(dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number)))
}
result_dr
result_block
result_block$Li_2009_y_4$eigenvalues
result_sir[[4]]
result_dr[[4]]$evalues
names(result_dr) <- data_list
mapply(dr_test_sir, object = result_block)
mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
test_result <- mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
test_result$Li_2009_y_1
input <- prepare_input("Li_2009", root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
result_block$Li_2009_y_1
result_block$Li_2009_y_4
SIR_blocks(input$data_list[1], slice_levels = letters[1:input$slice_number], input$block, root_path)
SIR_blocks(input$data_list[1], slice_levels = letters[1:input$slice_number], block = input$block, root_path = root_path)
source("sir_helpers.R")
input <- prepare_input("Li_2009", root_path)
setwd("~/dev/projects/inverse_regression/R_code/")
root_path <- "../sim_data/"
input <- prepare_input("Li_2009", root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
SIR_blocks(input$data_list[1], slice_levels = letters[1:input$slice_number], block = input$block, root_path = root_path)
x <- stats::runif(20)
y <- list(a = 1, b = TRUE, c = "oops")
save(x, y, file = "xy.RData")
getwd()
load(file = "xy.RData")
rm(list = ls())
load(file = "xy.RData")
parent.env()
env
x <- stats::runif(20)
y <- list(a = 1, b = TRUE, c = "oops")
saveRDS(x, y, file = "xy.rds")
x <- stats::runif(20)
y <- list(a = 1, b = TRUE, c = "oops")
saveRDS(x,file = "xy.rds")
load(file = "xy.RData")
load(file = "xy.rds")
x <- load(file = "xy.rds")
x <- stats::runif(20)
y <- list(a = 1, b = TRUE, c = "oops")
saveRDS(x, file = "xy.rds")
x <- load(file = "xy.rds")
x <- readRDS(file = "xy.rds")
x
setwd("~/dev/projects/inverse_regression/R_code/")
root_path <- "../sim_data/"
source("sir_helpers.R")
source("simulation_generation.R")
source("simulation_generation.R")
input <- prepare_input("Li_2009", root_path)
input
input$data_list
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
test_result_block <- mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
result_dr <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_dr <- append(result_dr, list(dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number)))
}
names(result_dr) <- data_list
names(result_dr) <- input$data_list
test_result_dr <- mapply(dr_test_sir, object = result_dr, SIMPLIFY = FALSE)
test_result_dr <- mapply(dr.test, object = result_dr, SIMPLIFY = FALSE)
test_result_block
test_result_dr
test_result_dr[1]
test_result_block[1]
for ( i in 1:length(input$data_list)) {
cat("###############################\n")
print(result_block[i])
print(result_dr[i])
cat("###############################\n")
}
for ( i in 1:length(input$data_list)) {
print(test_result_block[i])
print(test_result_dr[i])
cat("###############################\n")
}
input <- prepare_input("mussles", root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
test_result_block <- mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
## dir
result_dr <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_dr <- append(result_dr, list(dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number)))
}
names(result_dr) <- input$data_list
test_result_dr <- mapply(dr.test, object = result_dr, SIMPLIFY = FALSE)
for ( i in 1:length(input$data_list)) {
print(test_result_block[i])
print(test_result_dr[i])
cat("#########################################################\n")
}
setwd("~/dev/projects/inverse_regression/R_code/")
root_path <- "../sim_data/"
source("sir_helpers.R")
source("simulation_generation.R")
library(dr)
setwd("~/dev/projects/inverse_regression/R_code/")
log(10000)
log10(10000)
setwd("~/dev/projects/inverse_regression/R_code/")
root_path <- "../../../dr_sim_data/"
source("sir_helpers.R")
source("simulation_generation.R")
input <- prepare_input("Li_2009", root_path)
input <- prepare_input("4_Li_2009", root_path)
rep(6,5)
10^(4:6)
setwd("~/dev/projects/inverse_regression/R_code/Li_2009")
root_path <- "../../../../dr_sim_data/"
source("../sir_helpers.R")
source("simulation_generation_Li_2009.R")
source("simulation_generation_Li_2009.R")
source("simulation_generation_Li_2009.R")
source("simulation_generation_Li_2009.R")
setwd("~/dev/projects/inverse_regression/R_code/Li_2009")
root_path <- "../../../../dr_sim_data/"
source("../sir_helpers.R")
source("simulation_generation_Li_2009.R")
source("simulation_generation_Li_2009.R")
for (i in 1:3) {
input <- prepare_input(paste0(i, "_Li_2009"), root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
test_result_block <- mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
## dir
result_dr <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_dr <- append(result_dr, list(dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number)))
}
names(result_dr) <- input$data_list
test_result_dr <- mapply(dr.test, object = result_dr, SIMPLIFY = FALSE)
for ( i in 1:length(input$data_list)) {
print(test_result_block[i])
print(test_result_dr[i])
cat("#########################################################\n")
}
}
source("../sir_helpers.R")
source("simulation_generation_Li_2009.R")
setwd("~/dev/projects/inverse_regression/R_code/Li_2009")
root_path <- "../../../../dr_sim_data/"
source("../sir_helpers.R")
source("simulation_generation_Li_2009.R")
library(dr)
i =1
i =2
input <- prepare_input(paste0(i, "_Li_2009"), root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
input
options(error = recover)
setwd("~/dev/projects/inverse_regression/R_code/Li_2009")
root_path <- "../../../../dr_sim_data/"
source("../sir_helpers.R")
source("simulation_generation_Li_2009.R")
i <-2
input <- prepare_input(paste0(i, "_Li_2009"), root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
SIR_blocks(group_name = input$data_list, slice_levels = letters[1:input$slice_number], block = input$block, root_path = root_path)
ls()
header
ls()
file
ls()
input_file
header
header
input_file = paste0(root_path, "header_", group_name)
input_file
SIR_blocks(group_name = input$data_list[1], slice_levels = letters[1:input$slice_number], block = input$block, root_path = root_path)
getwd()
getwd()
setwd("~/dev/projects/inverse_regression/R_code/Li_2009")
root_path <- "../../../../dr_sim_data/"
setwd("~/dev/projects/inverse_regression/R_code/Li_2009")
root_path <- "../../../../dr_sim_data/"
source("../sir_helpers.R")
source("simulation_generation_Li_2009.R")
library(dr)
getwd()
setwd("~/dev/projects/inverse_regression/R_code/Li_2009")
getwd()
setwd("~/dev/projects/inverse_regression/R_code/Li_2009")
getwd()
setwd("~/dev/projects/inverse_regression/R_code/Li_2009")
getwd()
setwd("~/dev/projects/inverse_regression/R_code/Li_2009/")
getwd()
setwd("~")
getwd()
setwd("~/dev/projects/inverse_regression/R_code/Li_2009/")
getwd()
setwd("~/dev/projects/inverse_regression/R_code/Li_2009/")
root_path <- "../../../../dr_sim_data/"
source("../sir_helpers.R")
source("simulation_generation_Li_2009.R")
library(dr)
for (i in 2:4) {
input <- prepare_input(paste0(i, "_Li_2009"), root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
test_result_block <- mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
## dir
result_dr <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_dr <- append(result_dr, list(dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number)))
}
names(result_dr) <- input$data_list
test_result_dr <- mapply(dr.test, object = result_dr, SIMPLIFY = FALSE)
for ( i in 1:length(input$data_list)) {
print(test_result_block[i])
print(test_result_dr[i])
cat("#########################################################\n")
}
}
i = 2
SIR_blocks(group_name = input$data_list[1], slice_levels = letters[1:input$slice_number], block = input$block, root_path = root_path)
options(error = recover)
SIR_blocks(group_name = input$data_list[1], slice_levels = letters[1:input$slice_number], block = input$block, root_path = root_path)
source("../sir_helpers.R")
SIR_blocks(group_name = input$data_list[1], slice_levels = letters[1:input$slice_number], block = input$block, root_path = root_path)
ls()
dim(x)
missing_slice <- subset(slice_levels, !(slice_levels %in% unique(slice)))
if (length(missing_slice)>0) {
slice <- append(slice, missing_slice)
x <- matrix(0, nrow = length(missing_slice), ncol = ncol(x)) %>%
rbind(x, .)
}
tem_table <- data.table::data.table(x, slice)
tem_table
sum_h <- tem_table[, lapply(.SD, sum), keyby = slice][, slice:=NULL] %>% data.matrix(.)
sum_h
SIR_blocks(group_name = input$data_list[1], slice_levels = letters[1:input$slice_number], block = input$block, root_path = root_path)
source("../sir_helpers.R")
SIR_blocks(group_name = input$data_list[1], slice_levels = letters[1:input$slice_number], block = input$block, root_path = root_path)
sum_h
sum_h
sum_h
sum_h
tem_table
tem_table$slice %>% unique()
tem_table$slice %>% unique() %>% length()
slice_levels
dim(x)
block_data <- read.table(f, header = FALSE, col.names = header, sep = ",", stringsAsFactors = FALSE)
x_location <- grep("x", header)
slice_location <- grep("slice", header)
x <- block_data[,x_location] %>% data.matrix(.)
slice <- block_data[,slice_location]
sum_x_x_t <- crossprod(x)
slice %>% unique(.)
setwd("~/dev/projects/inverse_regression/R_code/Li_2009/")
root_path <- "../../../../dr_sim_data/"
source("../sir_helpers.R")
source("simulation_generation_Li_2009.R")
source("simulation_generation_Li_2009.R")
source("simulation_generation_Li_2009.R")
slice_number
slice_number
slice_number
slice %>% unique()
y
dr.slices(y, slice_number)
dr.slices(y, nslices = slice_number)
class(y)
y
slice_number
dr.slices(y, nslices = 8)$nslice
dr.slices.arc(y, nslices = 8)$nslice
source("../sir_helpers.R")
source("simulation_generation_Li_2009.R")
library(dr)
for (i in 2:4) {
input <- prepare_input(paste0(i, "_Li_2009"), root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
test_result_block <- mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
## dir
result_dr <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_dr <- append(result_dr, list(dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number)))
}
names(result_dr) <- input$data_list
test_result_dr <- mapply(dr.test, object = result_dr, SIMPLIFY = FALSE)
for ( i in 1:length(input$data_list)) {
print(test_result_block[i])
print(test_result_dr[i])
cat("#########################################################\n")
}
}
for (i in 2:4) {
input <- prepare_input(paste0(i, "_Li_2009"), root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
test_result_block <- mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
## dir
result_dr <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_dr <- append(result_dr, list(dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number)))
}
names(result_dr) <- input$data_list
test_result_dr <- mapply(dr.test, object = result_dr, SIMPLIFY = FALSE)
for ( i in 1:length(input$data_list)) {
print(test_result_block[i])
print(test_result_dr[i])
cat("#########################################################\n")
}
}
source("../sir_helpers.R")
library(dr)
for (i in 2:4) {
input <- prepare_input(paste0(i, "_Li_2009"), root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
test_result_block <- mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
## dir
result_dr <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_dr <- append(result_dr, list(dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number, slice.function=dr.slices.arc)))
}
names(result_dr) <- input$data_list
test_result_dr <- mapply(dr.test, object = result_dr, SIMPLIFY = FALSE)
for ( i in 1:length(input$data_list)) {
print(test_result_block[i])
print(test_result_dr[i])
cat("#########################################################\n")
}
}
setwd("~/dev/projects/inverse_regression/R_code/Li_2009/")
root_path <- "../../../../dr_sim_data/"
source("../sir_helpers.R")
source("simulation_generation_Li_2009.R")
source("simulation_generation_Li_2009.R")
library(dr)
for (i in 2:4) {
input <- prepare_input(paste0(i, "_Li_2009"), root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
test_result_block <- mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
## dir
result_dr <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_dr <- append(result_dr, list(dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number, slice.function=dr.slices.arc)))
}
names(result_dr) <- input$data_list
test_result_dr <- mapply(dr.test, object = result_dr, SIMPLIFY = FALSE)
for ( i in 1:length(input$data_list)) {
print(test_result_block[i])
print(test_result_dr[i])
cat("#########################################################\n")
}
}
setwd("~/dev/projects/inverse_regression/R_code/Li_2009/")
root_path <- "../../../../dr_sim_data/"
source("../sir_helpers.R")
source("simulation_generation_Li_2009.R")
source("simulation_generation_Li_2009.R")
library(dr)
for (i in 3:6) {
input <- prepare_input(paste0(i, "_Li_2009"), root_path)
result_block <- mapply(FUN = SIR_blocks,
group_name = input$data_list,
MoreArgs = list(slice_levels = letters[1:input$slice_number],
block = input$block,
root_path = root_path),
SIMPLIFY = FALSE)
test_result_block <- mapply(dr_test_sir, object = result_block, SIMPLIFY = FALSE)
## dir
result_dr <- list()
for( f in input$data_list){
input_data <- read.csv(paste0(root_path, f, ".csv"))
result_dr <- append(result_dr, list(dr(y ~., data = input_data[, -ncol(input_data)], method = "sir", nslice = input$slice_number, slice.function=dr.slices.arc)))
}
names(result_dr) <- input$data_list
test_result_dr <- mapply(dr.test, object = result_dr, SIMPLIFY = FALSE)
for ( i in 1:length(input$data_list)) {
print(test_result_block[i])
print(test_result_dr[i])
cat("#########################################################\n")
}
}
test_result_block
library(foreach)
library(doParallel)
registerDoParallel(4)
log(0.9668428119)
log(-log(0.9668428119))
exp(0.02090)
